def filter_ts1_pulses(ws,peak_period=20000,peak_res = 300):
    """ Function filters (removes) events occuring with periodicity cpecified by  peak_period value
        and within time interval peak_res (from each event period start)
        Time intervals are in units of uSec.
        
        Intended for filtering fast neutrons peaks generated by TS1 on LET
    
    """
    x_s = ws.readX(0)
    xmin = 0 #x_s[0]
    xmax = x_s[-1]
    #ws=Rebin(ws,OutputWorkspace=ws.name(),Params=[xmin,xmax,10],PreserveEvents=1)
    bin_ranges = range(int(xmin),int(xmax),peak_period)
    nb = len(bin_ranges)-1

    ws_list = []
    r_min = xmin
    print "Splitting input workspace {0} into {1} time intervals excluding specified periods".format(ws.name(),nb)
    for ind,x_min in enumerate(bin_ranges):
        r_max = x_min + peak_period-10
        if r_max > xmax:
            r_max = xmax
        if r_max<=r_min:
            continue
        print 'Step #{0}/{1}; r_min={2}, r_max={3}'.format(ind+1,nb,r_min,r_max)
        part  = FilterByXValue(ws,OutputWorkspace ='{0}_{1}'.format(ws.name(),ind+1),XMin=r_min,XMax=r_max)
        ws_list.append(part)
		
        r_min  = x_min + peak_period+peak_res
 
    targ_ws_name = '{0}_fltrd'.format(ws.name())
    MergeRuns(InputWorkspaces=ws_list,OutputWorkspace=targ_ws_name)
	# transfer monitor workspace
    wst = mtd[targ_ws_name]
    try:
       mon_ws = ws.getMonitorWorkspace()
    except RuntimeError: # May be old code or some problem connecting workspace with monitor workspace
      ws_name = ws.name()
      mon_ws_name = ws_name+'_monitors'
      if mon_ws_name in mtd:
         mon_ws = mtd[mon_ws_name]
      else:
         mon_ws = None
    if mon_ws:
       wst.setMonitorWorkspace(mon_ws) # connect workspace and monitors together  	
	   
    for ws in ws_list:
       DeleteWorkspace(ws)
	 
    return wst

if __name__ ==  '__main__':
    
    ws = mtd['LET00026770s']
    filter_ts1_pulses(ws,peak_period=20000,peak_res = 300)


#for tim in fl.times:    
#    ts = datetime.datetime.utcfromtimestamp(tim.total_nanoseconds()/1e+9)    
#    AddTimeSeriesLog(ws,'ts2_neutrons_count',Time = str(ts),Value = 1,DeleteExisting=True)
   
    
