from mantid.simpleapi import *
from mantid import config

import math
import os

# printing procedure
def write_detectors(instr_type,instr,ndet):
    ''' print first ndet detectors from given instrument '''
        # get first 10 detectors using detector ID 

    print "{0} {1} instrument".format(instr_type, instr.getName())
    print  'det ID | monitor? | polar angle| position X | position Y | position Z |  Pressure  | Wall thick |'
    for i in xrange(0,ndet):
      if i<3:
          detBase = 1
      else:
          detBase = 1101-3
      detID = detBase+i
      det1 = instr.getDetector(detID);
      pos = det1.getPos();
      pressure = det1.getNumberParameter('TubePressure');
      thickness = det1.getNumberParameter('TubeThickness');
      print ' {0:5} | {1:8} | {2:10.3f} | {3:>10.3f} | {4:>10.3f} | {5:>10.3f} | {6:10} | {7:10} |\n'.format(\
             detID,det1.isMonitor(),(det1.getPhi()*(180/math.pi)),pos.X(),pos.Y(),pos.Z(),pressure[0],thickness[0]),
    print '*********************************************************************************'
    #       
def prepare_test_detector(ind):
     """  prepare modified detector with random test values  """
     if ind<3:
         detBase = 1
         offset=0; 
         l2 = -10  # incorrect  L2 for testing changes
         code=1
         theta = 180 # incorrect theta for testing changes
         phi = 1     # incorrect phi for testing changes
         w_xyz = 0.5 # incorrect w_x,w_y, w_z for testing changes
         f_xyz = 5   # incorrect for testing changes
         a_xyz = 10  # incorrect for testing changes
         det1  = 1   # incorrect for testing changes
         det2  = 5   # incorrect tube pressure for testing changes
         det3  = 0.09 # incorrect wall thickness for testing changes
         det4  = 1   # incorrect for testing changes
     else:
         detBase = 1101-3
         offset=5.5
         l2 =  10  # incorrect  L2 for testing changes
         code = 3
         theta = -180 #  incorrect theta for testing changes
         phi = 90     # incorrect phi for testing changes
         w_xyz = 1.5 # incorrect w_x,w_y, w_z for testing changes
         f_xyz = 50   # incorrect for testing changes
         a_xyz = 20  # incorrect for testing changes
         det1  = 3   # incorrect for testing changes
         det2  = 15   # incorrect tube pressure for testing changes
         det3  = 0.9    # incorrect wall thickness for testing changes
         det4  = 110101   # incorrect for testing changes
     return (detBase,offset,l2,code,theta,phi,w_xyz,f_xyz,a_xyz,det1,det2,det2,det4)
    

def write_test_cal_file(filename,instrument,ndet):
   """ writes partial detector.dat file  modified for testing purposes
         filename   -- the string, describing the name of the file to write:
         instrument -- the pointer to instrument to modify
         ndet       -- number of detectors to modify using this calibration file for testing purposes
   """

   f = open(filename,'w');
   f.write("Full format DETECTOR.DAT generated by CREATE_DETECTOR_FILE (part of it written for testing purposes)");
   f.write("{0}    14\n".format(ndet))
   f.write("det no.  offset    l2     code     theta        phi         w_x         w_y         w_z         f_x         f_y         f_z         a_x         a_y         a_z        det_1       det_2       det_3       det4\n");

   for i in xrange(0,ndet):
      detBase,offset,l2,code,theta,phi,w_xyz,f_xyz,a_xyz,det1,det2,det3,det4=prepare_test_detector(i);
      detID = detBase+i
      f.write("{0:>9} {1:>7} {2: >8f} {3:>5} {4:>11f} {5:>11f} {6:>11f} {7:>11f} {8:>11f} {9:>11f} {10:>11f} {11:>11f} {12:>11f} {13:>11f} {14:>11f} {15:>11f} {16:>11f} {17:>11f} {18:>11f} {19:>11f}\n".format(\
          detID,offset,l2,code,theta,phi,w_xyz,w_xyz,w_xyz,f_xyz,f_xyz,f_xyz,a_xyz,a_xyz,a_xyz,a_xyz,det1,det2,det3,det4))
   #  end write loop
   f.close()
 
#-------------------- ------------------------------------------------------------------      
#  TEST  THE ALGORITHM
#--------------------------------------------------------------------------------------      
# create sample workspace
ws=CreateSampleWorkspace();  
#--------------------------------------------------------------------------------------      
# load MARI
det=LoadInstrument(ws,InstrumentName='MARI')   
inst1=ws.getInstrument();   
#   
write_detectors('unCalibrated',inst1,10);
#--------------------------------------------------------------------------------------   
# Prepare calibration file changing first 6 detectors & monitors
file_name = 'mari_det.dat'
write_test_cal_file(file_name ,inst1,6);
#--------------------------------------------------------------------------------------      
# CALIBRATE mari using full det.dat calibration file
LoadDetectorInfo(ws,DataFilename=file_name,RelocateDets=True);
inst1=ws.getInstrument();
#--------------------------------------------------------------------------------------      
# look at the result:
write_detectors('Calibrated',inst1,10);

